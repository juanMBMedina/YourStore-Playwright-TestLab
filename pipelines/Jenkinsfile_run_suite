pipeline {
    agent any

    environment {
        SUITE = "login"
        BROWSER = "chrome"
        WORKERS = "2"
    }

    parameters {
        choice(
            name: 'SUITE',
            choices: ['login', 'register', 'add-to-cart', 'all-tests'],
            description: 'Select the test suite to run'
        )
        choice(
            name: 'BROWSER',
            choices: ['chrome', 'edge', 'firefox'],
            description: 'Select the browser for test execution'
        )
        string(
            name: 'WORKERS',
            defaultValue: '1',
            description: 'Number of parallel processes to run tests'
        )

        booleanParam(
            name: 'COVERAGE',
            defaultValue: false,
            description: 'Enable or disable code coverage reporting'
        )
    }

    stages {
        stage('Run Playwright Tests in Docker') {
            steps {
                script {
                    echo "Running Playwright tests for suite: ${params.SUITE} on browser: ${params.BROWSER}"
                    def playwrightCommand = ''

                    if (params.COVERAGE) {
                        playwrightCommand = 'npm run coverage'
                    } else if (params.SUITE == 'all-tests') {
                        playwrightCommand = 'npm run test:all'
                    } else {
                        playwrightCommand = 'npm run test'
                    }

                    env.SUITE = params.SUITE
                    env.BROWSER = params.BROWSER
                    env.WORKERS = params.WORKERS

                    sh """
                        docker-compose -f docker-compose.playwright.yml run --rm \
                            -e SUITE=${env.SUITE} \
                            -e BROWSER=${env.BROWSER} \
                            -e WORKERS=${env.WORKERS} \
                            playwright ${playwrightCommand}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Tests executed successfully. Playwright report is available.'
        }
        failure {
            echo 'Tests failed. Please check the execution logs and generated report.'
        }
        always {
            script {
                echo 'Store Playwright Reports'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: './playwright-report/',
                    reportFiles: 'index.html',
                    reportName: "${params.SUITE}-Playwright-Report"
                ])
                echo 'Pipeline execution finished.'
            }
        }
    }
}
