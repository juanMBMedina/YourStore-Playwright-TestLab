pipeline {
    agent any

    environment {
        TEMP_DIR = "/var/jenkins_home/temp/playwright"
    }

    parameters {
        choice(
            name: 'SUITE',
            choices: ['login', 'register', 'add-to-cart', 'all-tests'],
            description: 'Select the test suite to run'
        )
        choice(
            name: 'BROWSER',
            choices: ['chrome', 'edge', 'firefox'],
            description: 'Select the browser for test execution'
        )
        string(
            name: 'WORKERS',
            defaultValue: '1',
            description: 'Number of parallel processes to run tests'
        )

        booleanParam(
            name: 'COVERAGE',
            defaultValue: false,
            description: 'Enable or disable code coverage reporting'
        )
    }

    stages {

        stage('Setting environment') {
            steps {
                script {
                    echo "Setting environment variables"
                    env.ORIGINAL_DIR = env.WORKSPACE // Save the original directory
                    env.SUITE = params.SUITE
                    env.BROWSER = params.BROWSER
                    env.WORKERS = params.WORKERS
                }
            }
        }

        stage('Prepare files in temporal directory') {
            steps {
                script {
                    echo "Preparing files in temporary directory: ${env.TEMP_DIR}"
                    sh """
                        mkdir -p ${env.TEMP_DIR}
                        cp -r ./* ${env.TEMP_DIR}/
                    """
                }
            }
        }

        stage('Run Playwright Tests in Docker') {
            steps {
                dir("${env.TEMP_DIR}") {
                    echo "Changed directory to: ${env.TEMP_DIR}"

                    script {
                        echo "Running Playwright tests for suite: ${env.SUITE} on browser: ${env.BROWSER}"
                        def playwrightCommand = ''

                        if (env.COVERAGE) {
                            playwrightCommand = 'npm run coverage'
                        } else if (env.SUITE == 'all-tests') {
                            playwrightCommand = 'npm run test:all'
                        } else {
                            playwrightCommand = 'npm run test'
                        }

                        sh """
                            docker-compose -f docker-compose.playwright.yml run --rm \
                                -e SUITE=${env.SUITE} \
                                -e BROWSER=${env.BROWSER} \
                                -e WORKERS=${env.WORKERS} \
                                playwright
                        """
                    }
                }
            }
        }

        stage('Copy report folder to original directory') {
            steps {
                script {
                    dir("${env.TEMP_DIR}") {
                        echo "Copying report folder back to original directory"
                        sh """
                            cp -r ${env.TEMP_DIR}/playwright-report/ ${env.ORIGINAL_DIR}/playwright-report/
                            echo "Playwright report copied to ${env.ORIGINAL_DIR}/playwright-report/"
                        """
                    }
                }
            }
        }

        stage('Publish report') {
            steps {
                script {
                    echo 'Publishing Playwright Reports'
                    dir(env.ORIGINAL_DIR) {
                        publishHTML(target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: './playwright-report/',
                            reportFiles: 'index.html',
                            reportName: "${params.SUITE}-Playwright-Report"
                        ])
                    }
                }
            }
        }

        stage('Clean temporal directory') {
            steps {
                script {
                    echo "Cleaning up temporary directory: ${env.TEMP_DIR}, excluding node_modules folder"
                    sh "find ${env.TEMP_DIR} -mindepth 1 -not -name 'node_modules' -exec rm -rf {} +"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
        always {
            echo 'Pipeline execution finished.'
        }
    }
}
